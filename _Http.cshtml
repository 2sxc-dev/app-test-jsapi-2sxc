@using System
@using System.Collections.Generic
@inherits ToSic.Sxc.Dnn.RazorComponent

<h1>JS API Tests</h1>

<p>
  This app is synced on <a href="https://github.com/2sxc-dev/app-test-jsapi-2sxc" target="_blank">app-test-jsapi-2sxc</a>
</p>

@{
    string table = "Table1";
    List<string[]> list = new List<string[]>() {
        new string[] { "New v12 fetch" },
        new string[] { "FETCH_GET_CONTENT_QUICK", "Fetch Get Content Quick " + table },
        new string[] { "FETCH_GET_CONTENT_QUICK_JSON", "Fetch Get Content Quick JSON " + table },
        new string[] { "FETCH_POST_CONTENT_QUICK", "Fetch Post Content Quick " + table },
        new string[] { "FETCH_POST_CONTENT_QUICK_JSON", "Fetch Post Content Quick JSON " + table },
        new string[] { "FETCH_DELETE_CONTENT_QUICK", "Fetch Delete Content Quick " + table },

        new string[] { "Standard fetch" },
        new string[] { "FETCH_GET_CONTENT", "Fetch Get Content " + table },
        new string[] { "FETCH_POST_CONTENT", "Fetch Post Content " + table },
        new string[] { "FETCH_DELETE_CONTENT", "Fetch Delete Content " + table },
        new string[] { "FETCH_ERROR_CONTENT", "Fetch Error Content " + table },

        new string[] { "Axios" },
        new string[] { "AXIOS_GET_CONTENT", "Axios Get Content " + table },
        new string[] { "AXIOS_POST_CONTENT", "Axios Post Content " + table },
        new string[] { "AXIOS_DELETE_CONTENT", "Axios Delete Content " + table },
        new string[] { "AXIOS_ERROR_CONTENT", "Axios Error Content " + table },

        new string[] { "jQuery" },
        new string[] { "JQUERY_GET_CONTENT", "JQuery Get Content " + table },
        new string[] { "JQUERY_POST_CONTENT", "JQuery Post Content " + table },
        new string[] { "JQUERY_DELETE_CONTENT", "JQuery Delete Content " + table },
        new string[] { "JQUERY_ERROR_CONTENT", "JQuery Error Content " + table },

        new string[] { "SuperAgent" },
        new string[] { "SUPERAGENT_GET_CONTENT", "SuperAgent Get Content " + table },
        new string[] { "SUPERAGENT_POST_CONTENT", "SuperAgent Post Content " + table },
        new string[] { "SUPERAGENT_DELETE_CONTENT", "SuperAgent Delete Content " + table },
        new string[] { "SUPERAGENT_ERROR_CONTENT", "SuperAgent Error Content " + table },

        new string[] { "XHR" },
        new string[] { "XHR_GET_CONTENT", "XHR Get Content " + table },
        new string[] { "XHR_POST_CONTENT", "XHR Post Content " + table },
        new string[] { "XHR_DELETE_CONTENT", "XHR Delete Content " + table },
        new string[] { "XHR_ERROR_CONTENT", "XHR Error Content " + table },
    };
}


@foreach (string[] item in list.ToArray())
{
  if (item.Length == 1) {
    <hr>
    <h2>@item[0]</h2>
  } else {
    <button type="button" onclick="httpTest(this, '@item[0]')">@item[1]</button><br /><br />
  }
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.22.0/axios.min.js"
    integrity="sha512-m2ssMAtdCEYGWXQ8hXVG4Q39uKYtbfaJL5QMTbhl2kc6vYyubrKHhr6aLLXW4ITeXSywQLn1AhsAaqrJl8Acfg=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/superagent/4.1.0/superagent.min.js"
    integrity="sha512-LJaxxgpiq7SihGQ21nejROsll6FRrgbs0Wxtgqb5x+Q0CJICA3vt8hlBxSD8NLsO+Yabgg3B7ARexiijKiojGg=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
    function httpTest(context, action) {
        const table = '@table';
        const simpleUrl = `app/auto/content/${table}`;
        const controller = $2sxc(context);
        const webApi = controller.webApi;
        const reqData = {
            FirstName: 'FirstName',
            LastName: 'LastName',
        };
        /*
            fetch has no interceptors
            axios has interceptors, but they are global which is not practical: https://axios-http.com/docs/interceptors
            and has transformRequest, but can't change url and only available on some request types: https://axios-http.com/docs/req_config
            jquery has beforeSend: https://api.jquery.com/jquery.ajax/
            xhr has readyStateChange event:
            https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange
            https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
            superagent has poorly documented .use: https://github.com/visionmedia/superagent/issues/907
        */

        switch (action) {
            /* webApi FETCH New */
            case 'FETCH_GET_CONTENT_QUICK':
                webApi.fetch(simpleUrl)
                    .then(response => response.json())
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_GET_CONTENT_QUICK_JSON':
                webApi.fetchJson(simpleUrl)
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_POST_CONTENT_QUICK':
                webApi.fetch(simpleUrl, reqData) // any not-null data would result in post (null would also post)
                    .then(response => response.json())
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_POST_CONTENT_QUICK_JSON':
                webApi.fetchJson(simpleUrl, reqData)
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_DELETE_CONTENT_QUICK':
                webApi.fetchJson(simpleUrl)
                    .then(data => webApi.fetch(`${simpleUrl}?id=${data[data.length - 1].Id}`, null, 'DELETE'))
                    .then(() => console.log(action));
                break;

            /* WIP */
            case 'FETCH_POST_CONTENT_12_GETLIST':
                webApi.data("typeName")
                    .then(data => console.log(action, data));
                webApi.getData("typeName", 27)
                    .then(data => console.log(action, data));
                webApi.createData("typeName", 27)
                    .then(data => console.log(action, data));
                webApi.deleteData("typeName", 27)
                    .then(data => console.log(action, data));
                webApi.api("endpoint", "optionaldata", "optional-VERB")
                webApi.query("name", "optionaldata", "optional-VERB")
                break;

            /* FETCH Standard */
            case 'FETCH_GET_CONTENT':
                fetch(webApi.url(simpleUrl), {
                    headers: webApi.headers('GET'),
                })
                    .then(response => response.json())
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_POST_CONTENT':
                fetch(webApi.url(simpleUrl), {
                    method: 'POST',
                    headers: webApi.headers('POST'),
                    body: JSON.stringify(reqData),
                })
                    .then(response => response.json())
                    .then(data => console.log(action, data));
                break;
            case 'FETCH_DELETE_CONTENT':
                fetch(webApi.url(simpleUrl), {
                    headers: webApi.headers('GET'),
                })
                    .then(response => response.json())
                    .then(
                        data => fetch(`${webApi.url(simpleUrl)}?id=${data[data.length - 1].Id}`, {
                            method: 'DELETE',
                            headers: webApi.headers('DELETE'),
                        }),
                    )
                    .then(() => console.log(action));
                break;
            case 'FETCH_ERROR_CONTENT':
                fetch(`${webApi.url(simpleUrl)}?id=undefined`, {
                    method: 'DELETE',
                    headers: webApi.headers('DELETE'),
                })
                    .then(() => console.log(action));
                break;

            /* AXIOS */
            case 'AXIOS_GET_CONTENT':
                axios({
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('GET'),
                })
                    .then(response => console.log(action, response));
                break;
            case 'AXIOS_POST_CONTENT':
                axios({
                    method: 'POST',
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('POST'),
                    data: reqData,
                })
                    .then(response => console.log(action, response));
                break;
            case 'AXIOS_DELETE_CONTENT':
                axios({
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('GET'),
                })
                    .then(
                        response => axios({
                            method: 'DELETE',
                            url: `${webApi.url(simpleUrl)}?id=${response.data[response.data.length - 1].Id}`,
                            headers: webApi.headers('DELETE'),
                        }),
                    )
                    .then(() => console.log(action));
                break;
            case 'AXIOS_ERROR_CONTENT':
                axios({
                    method: 'DELETE',
                    url: `${webApi.url(simpleUrl)}?id=undefined`,
                    headers: webApi.headers('DELETE'), 
                })
                    .then(() => console.log(action));
                break;

            /* JQUERY */
            case 'JQUERY_GET_CONTENT':
                $.ajax({
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('GET'), 
                })
                    .then(data => console.log(action, data));
                break;
            case 'JQUERY_POST_CONTENT':
                $.ajax({
                    method: 'POST',
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('POST'),
                    data: JSON.stringify(reqData),
                })
                    .then(data => console.log(action, data));
                break;
            case 'JQUERY_DELETE_CONTENT':
                $.ajax({
                    url: webApi.url(simpleUrl),
                    headers: webApi.headers('GET'), 
                })
                    .then(
                        data => $.ajax({
                            method: 'DELETE',
                            url: `${webApi.url(simpleUrl)}?id=${data[data.length - 1].Id}`,
                            headers: webApi.headers('DELETE'),
                        }),
                    )
                    .then(() => console.log(action));
                break;
            case 'JQUERY_ERROR_CONTENT':
                $.ajax({
                    method: 'DELETE',
                    url: `${webApi.url(simpleUrl)}?id=undefined`,
                    headers: webApi.headers('DELETE'),
                })
                    .then(() => console.log(action));
                break;

            /* SUPERAGENT */
            case 'SUPERAGENT_GET_CONTENT':
                superagent
                    .get(webApi.url(simpleUrl))
                    .set(webApi.headers('GET'))
                    .then(response => console.log(action, response));
                break;
            case 'SUPERAGENT_POST_CONTENT':
                superagent
                    .post(webApi.url(simpleUrl))
                    .set(webApi.headers('POST'))
                    .send(reqData)
                    .then(response => console.log(action, response));
                break;
            case 'SUPERAGENT_DELETE_CONTENT':
                superagent
                    .get(webApi.url(simpleUrl))
                    .set(webApi.headers('GET'))
                    .then(
                        response => superagent
                            .delete(`${webApi.url(simpleUrl)}?id=${response.body[response.body.length - 1].Id}`)
                            .set(webApi.headers('DELETE'))
                    )
                    .then(() => console.log(action));
                break;
            case 'SUPERAGENT_ERROR_CONTENT':
                superagent
                    .delete(`${webApi.url(simpleUrl)}?id=undefined`)
                    .set(webApi.headers('DELETE'))
                    .then(() => console.log(action));
                break;

            /* XHR */
            case 'XHR_GET_CONTENT':
                const xhrGet = new XMLHttpRequest();
                xhrGet.onreadystatechange = event => {
                    if (xhrGet.readyState === XMLHttpRequest.DONE) {
                        console.log(action, JSON.parse(xhrGet.responseText));
                    }
                }
                xhrGet.open('GET', webApi.url(simpleUrl));
                Object.entries(webApi.headers('GET')).forEach(entry => xhrGet.setRequestHeader(entry[0], entry[1]));
                xhrGet.send();
                break;
            case 'XHR_POST_CONTENT':
                const xhrPost = new XMLHttpRequest();
                xhrPost.onreadystatechange = event => {
                    if (xhrPost.readyState === XMLHttpRequest.DONE) {
                        console.log(action, JSON.parse(xhrPost.responseText));
                    }
                }
                xhrPost.open('POST', webApi.url(simpleUrl));
                Object.entries(webApi.headers('POST')).forEach(entry => xhrPost.setRequestHeader(entry[0], entry[1]));
                xhrPost.send(JSON.stringify(reqData));
                break;
            case 'XHR_DELETE_CONTENT':
                const xhrGetForDelete = new XMLHttpRequest();
                xhrGetForDelete.onreadystatechange = event => {
                    if (xhrGetForDelete.readyState === XMLHttpRequest.DONE) {
                        const data = JSON.parse(xhrGetForDelete.responseText);
                        const xhrDelete = new XMLHttpRequest();
                        xhrDelete.onreadystatechange = event => {
                            if (xhrDelete.readyState === XMLHttpRequest.DONE) {
                                console.log(action);
                            }
                        }
                        xhrDelete.open('DELETE', `${webApi.url(simpleUrl)}?id=${data[data.length - 1].Id}`);
                        Object.entries(webApi.headers('DELETE')).forEach(entry => xhrDelete.setRequestHeader(entry[0], entry[1]));
                        xhrDelete.send();
                    }
                }
                xhrGetForDelete.open('GET', webApi.url(simpleUrl));
                Object.entries(webApi.headers('GET')).forEach(entry => xhrGetForDelete.setRequestHeader(entry[0], entry[1]));
                xhrGetForDelete.send();
                break;
            case 'XHR_ERROR_CONTENT':
                const xhrError = new XMLHttpRequest();
                xhrError.onreadystatechange = event => {
                    if (xhrError.readyState === XMLHttpRequest.DONE) {
                        console.log(action);
                    }
                }
                xhrError.open('DELETE', `${webApi.url(simpleUrl)}?id=undefined`);
                Object.entries(webApi.headers('DELETE')).forEach(entry => xhrError.setRequestHeader(entry[0], entry[1]));
                xhrError.send();
                break;
        }
    }
</script>
